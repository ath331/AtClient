////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief  PacketSession Class
////////////////////////////////////////////////////////////////////////////////////////////////////


#include "Network/PacketSession.h"
#include "NetworkWorker.h"
#include "Network/Handler/ServerPacketHandler.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief  생성자
////////////////////////////////////////////////////////////////////////////////////////////////////
PacketSession::PacketSession( class FSocket* Socket )
	: Socket( Socket )
{
	ServerPacketHandler::Init();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief  소멸자
////////////////////////////////////////////////////////////////////////////////////////////////////
PacketSession::~PacketSession()
{
	Disconnect();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief  세션을 동작시킨다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void PacketSession::Run()
{
	RecvWorkerThread = MakeShared< RecvWorker >( Socket, AsShared() );
	SendWorkerThread = MakeShared< SendWorker >( Socket, AsShared() );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief  받은 패킷을 처리한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void PacketSession::HandleRecvPackets()
{
	while ( true )
	{
		TArray< uint8 > Packet;
		if ( !RecvPacketQueue.Dequeue( OUT Packet ) )
			break;

		PacketSessionPtr ThisPtr = AsShared();
		ServerPacketHandler::HandlePacket( ThisPtr, Packet.GetData(), Packet.Num() );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief  패킷을 전송한다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void PacketSession::SendPacket( SendBufferPtr SendBuffer )
{
	SendPacketQueue.Enqueue( SendBuffer );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief  세션 연결을 끊는다.
////////////////////////////////////////////////////////////////////////////////////////////////////
void PacketSession::Disconnect()
{
	if ( RecvWorkerThread )
	{
		RecvWorkerThread->Destroy();
		RecvWorkerThread = nullptr;
	}

	if ( SendWorkerThread )
	{
		SendWorkerThread->Destroy();
		SendWorkerThread = nullptr;
	}
}
